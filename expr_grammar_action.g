tokens SYM_EOF SYM_IDENTIFIER<string> SYM_INTEGER<int> SYM_PLUS SYM_MINUS SYM_ASTERISK SYM_DIV SYM_MOD
tokens SYM_LPARENTHESIS SYM_RPARENTHESIS SYM_LBRACE SYM_RBRACE
tokens SYM_ASSIGN SYM_SEMICOLON SYM_RETURN SYM_IF SYM_WHILE SYM_ELSE SYM_COMMA SYM_PRINT
tokens SYM_EQUALITY SYM_NOTEQ SYM_LT SYM_LEQ SYM_GT SYM_GEQ
non-terminals S INSTR INSTRS LINSTRS ELSE EXPR FACTOR
non-terminals LPARAMS REST_PARAMS
non-terminals IDENTIFIER INTEGER
non-terminals FUNDEF FUNDEFS
non-terminals ADD_EXPRS ADD_EXPR
non-terminals MUL_EXPRS MUL_EXPR
non-terminals CMP_EXPRS CMP_EXPR
non-terminals EQ_EXPRS EQ_EXPR
axiom S
{

  open Symbols
  open Ast
  open BatPrintf
  open BatBuffer
  open Batteries
  open Utils

   (* TODO *)
  let resolve_associativity term other =
      (* TODO *)
    term


}



rules
S -> FUNDEF FUNDEFS SYM_EOF {  Node (Tlistglobdef, []) }

FUNDEFS -> FUNDEF FUNDEFS 
FUNDEFS ->

FUNDEF -> IDENTIFIER SYM_LPARENTHESIS LPARAMS SYM_RPARENTHESIS LINSTRS

LPARAMS -> EXPR REST_PARAMS 
LPARAMS -> 

REST_PARAMS -> SYM_COMMA EXPR REST_PARAMS
REST_PARAMS -> 

LINSTRS -> SYM_LBRACE INSTR INSTRS SYM_RBRACE
LINSTRS -> INSTR

INSTRS -> INSTR INSTRS
INSTRS ->

INSTR -> SYM_IF SYM_LPARENTHESIS EXPR SYM_RPARENTHESIS SYM_LBRACE LINSTRS SYM_RBRACE ELSE
INSTR -> SYM_RETURN EXPR SYM_SEMICOLON
INSTR -> SYM_PRINT SYM_LPARENTHESIS EXPR SYM_RPARENTHESIS SYM_SEMICOLON
INSTR -> SYM_WHILE SYM_LPARENTHESIS EXPR SYM_RPARENTHESIS LINSTRS

ELSE -> SYM_ELSE SYM_LBRACE INSTRS SYM_RBRACE
ELSE ->


EXPR -> SYM_MINUS EXPR
EXPR -> IDENTIFIER
EXPR -> INTEGER

ADD_EXPRS -> MUL_EXPRS ADD_EXPR

ADD_EXPR -> SYM_PLUS MUL_EXPRS ADD_EXPR
ADD_EXPR -> SYM_MINUS MUL_EXPRS ADD_EXPR
ADD_EXPR ->


MUL_EXPRS -> EXPR MUL_EXPR

MUL_EXPR -> SYM_ASTERISK EXPR MUL_EXPR
MUL_EXPR -> SYM_DIV EXPR MUL_EXPR
MUL_EXPR -> SYM_MOD EXPR MUL_EXPR
MUL_EXPR ->

CMP_EXPRS -> ADD_EXPRS CMP_EXPR

CMP_EXPR -> SYM_LT ADD_EXPRS CMP_EXPR
CMP_EXPR -> SYM_LEQ ADD_EXPRS CMP_EXPR
CMP_EXPR -> SYM_GT ADD_EXPRS CMP_EXPR
CMP_EXPR -> SYM_GEQ ADD_EXPRS CMP_EXPR
CMP_EXPR ->

EQ_EXPRS -> ADD_EXPRS EQ_EXPR

EQ_EXPR -> SYM_EQUALITY ADD_EXPRS EQ_EXPR
EQ_EXPR -> SYM_NOTEQ ADD_EXPRS EQ_EXPR

IDENTIFIER -> SYM_IDENTIFIER

INTEGER -> SYM_INTEGER
